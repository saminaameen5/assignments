{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter marks of first subject 40\n",
      "enter marks of second subject 50\n",
      "enter marks of third subject 60\n",
      "enter marks of fourth subject 70\n",
      "enter marks of fifth subject 80\n",
      "the total marks obtained are: 300\n",
      "Grade: D\n"
     ]
    }
   ],
   "source": [
    "sub1=int(input('enter marks of first subject '))\n",
    "sub2=int(input('enter marks of second subject '))\n",
    "sub3=int(input('enter marks of third subject '))\n",
    "sub4=int(input('enter marks of fourth subject '))\n",
    "sub5=int(input('enter marks of fifth subject '))\n",
    "total=sub1+sub2+sub3+sub4+sub5\n",
    "print (\"the total marks obtained are:\" ,total)\n",
    "avg=(sub1+sub2+sub3+sub4+sub5)/5\n",
    "if(avg>=90):\n",
    "    print(\"Grade: A\")\n",
    "elif(avg>=80 and avg<90):\n",
    "    print(\"Grade: B\")\n",
    "elif(avg>=70 and avg<80):\n",
    "    print(\"Grade: C\")\n",
    "elif(avg>=60 and avg<70):\n",
    "    print(\"Grade: D\")\n",
    "else:\n",
    "    print(\"Grade: F\")\n",
    "        \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number6\n",
      "the number is even\n"
     ]
    }
   ],
   "source": [
    "num= int(input('enter a number'))\n",
    "mod=num % 2\n",
    "if (mod>0):\n",
    "    print(\"the number is odd\")\n",
    "else:\n",
    "    print(\"the number is even\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the length is 6\n"
     ]
    }
   ],
   "source": [
    "a=[2,4,5,6,7,8]\n",
    "b=len(a)\n",
    "print(\"the length is\" ,b )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "how many numbers are tere in the list: 7\n",
      "enter number9\n",
      "sum is: 9\n",
      "enter number9\n",
      "sum is: 18\n",
      "enter number7\n",
      "sum is: 25\n",
      "enter number8\n",
      "sum is: 33\n",
      "enter number9\n",
      "sum is: 42\n",
      "enter number8\n",
      "sum is: 50\n",
      "enter number8\n",
      "sum is: 58\n"
     ]
    }
   ],
   "source": [
    "list=[]\n",
    "num=int(input(\"how many numbers are tere in the list: \"))\n",
    "for n in range (num):\n",
    "    numbers= int(input('enter number'))\n",
    "    list.append(numbers)\n",
    "    a=sum(list)\n",
    "    print(\"sum is:\" ,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "how many numbers are tere in the list: 2\n",
      "enter number2\n",
      "enter number3\n",
      "maximum number is:  3\n"
     ]
    }
   ],
   "source": [
    "list=[]\n",
    "num=int(input(\"how many numbers are tere in the list: \"))\n",
    "for n in range (num):\n",
    "    numbers= int(input('enter number'))\n",
    "    list.append(numbers)\n",
    "\n",
    "print(\"maximum number is: \",max(list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1]\n",
      "[1, 1]\n",
      "[1, 1, 2]\n",
      "[1, 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "a= [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] \n",
    "newlist=[]\n",
    "for item in a:\n",
    "    if item< 5:\n",
    "        newlist.append(item)\n",
    "        print(newlist)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
